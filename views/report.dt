- import std.format : format;
- import std.array : split, empty;
- import std.range : front, back;
- import std.datetime : Clock, UTC;
- import std.base64 : Base64;

//- libraries versions
- static immutable BOOTSTRAP_CSS_VERSION = "5.0.1;sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x";
- static immutable BOOTSTRAP_JS_VERSION = "5.0.1;sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4";
- static immutable CHART_JS_VERSION = "3.2.1;sha256-uVEHWRIr846/vAdLJeybWxjPNStREzOlqLMXjW/Saeo=";
- static immutable FONTAWESOME_CSS_VERSION = "5.15.3;sha256-2H3fkXt6FEmrReK448mDVGKb3WW2ZZw35gI7vqHOE4Y=";

//- constants and immutable values
- static immutable PAGE_TITLE = "GBoard Forensic Analysis Report";
- immutable curTime = Clock.currTime(UTC());
- immutable todayDate = curTime.toSimpleString();

doctype html
html(lang="en")
	head
		title #{format!"%s - %s"(PAGE_TITLE, todayDate)}

		//- page metadata
		meta(charset="utf-8")
		meta(name="viewport", content="width=device-width, initial-scale=1, shrink-to-fit=no")

		//- load bootstrap styles
		link(
			rel="stylesheet",
			href=format!"https://cdn.jsdelivr.net/npm/bootstrap@%s/dist/css/bootstrap.min.css"(BOOTSTRAP_CSS_VERSION.split(";").front),
			integrity=BOOTSTRAP_CSS_VERSION.split(";").back,
			crossorigin="anonymous"
		)
		//- load fontawesome styles
		link(
			rel="stylesheet",
			href=format!"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@%s/css/all.min.css"(FONTAWESOME_CSS_VERSION.split(";").front),
			integrity=FONTAWESOME_CSS_VERSION.split(";").back,
			crossorigin="anonymous"
		)

		//- custom style
		style.
			.table-responsive-vertical { max-height:300px; }
			.print-icon { display: inline; }

			@media print {
				.table-responsive-vertical { max-height: none; }
				.table-responsive { max-width: none; }
				.print-icon { display: none; }
			}
	body
		nav.navbar.navbar-light.bg-light.navbar-expand-lg
			.container-fluid
				span.navbar-brand.mb-0.h1
					img.d-inline-block.align-text-top(src=format!"data:image/png;base64, %s"(Base64.encode(cast(ubyte[])import("resources/gboard-logo.png"))), alt="", height="24")
					| GBoard Forensic Analysis Report
				a.nav-link.print-icon(href="#", onclick="window.print()")
					span.navbar-text
						i.fas.fa-print
		.container.mt-4
			.row
				.col
					h5.mb-3 Analysis Details
					table.table
						thead
							tr
								th(scope='row') Name
								th(scope='row') Description
						tbody
							tr
								th(scope='row') Date
								td= todayDate
							tr
								th(scope='row') Path
								td= data.path
							tr
								th(scope='row') Items Found
								td= data.countItems()
				.col
					h5.mb-3 Application Capability
					table.table
						thead
							tr
								th(scope='row') Name
								th(scope='row') Status
						tbody
							tr
								th(scope='row') Clipboard
								td
									i.fas.fa-times-circle.text-danger
							tr
								th(scope='row') Personal Dictionary
								td
									i.fas(
										class= data.dictionaries ? "fa-check-circle text-success" : "fa-times-circle text-danger"
									)
							tr
								th(scope='row') Translation Cache
								td
									i.fas.fa-times-circle.text-danger
							tr
								th(scope='row') Training Cache
								td
									i.fas(
										class= data.trainingcache ? "fa-check-circle text-success" : "fa-times-circle text-danger"
									)
			-if(!data.trainingcache.empty)
				.row
					.col
						h5.mb-3.mt-3 Relevant History
						.table-responsive.table-responsive-vertical
							table.table.table-sm.table-striped
								thead
									tr.table-dark
										th(scope='row') Time
										th(scope='row') Sequence
								tbody
									- import std.algorithm.iteration : map;
									- import std.array : join;
									- foreach (entry; data.trainingcache.map!(t => t.relevantHistory).join)
										tr
											td= entry.time
											td= entry.sequence

				.row
					.col
						h5.mb-3.mt-3 Raw History
						.table-responsive.table-responsive-vertical
							table.table.table-sm.table-striped
								thead
									tr.table-dark
										th(scope='row') Time
										th(scope='row') Type
										th(scope='row') Sequence
								tbody
									- import std.algorithm.iteration : map;
									- import std.array : join;
									- foreach (entry; data.trainingcache.map!(t => t.rawHistory).join)
										tr
											td= entry.time
											td
												-if(!entry.deleted.isNull && entry.deleted.get())
													i.fas.fa-minus.text-danger
												-else
													i.fas.fa-plus.text-success
											td= entry.sequence
					.col
						h5.mb-3.mt-3 Raw Assembled History
						.table-responsive.table-responsive-vertical
							table.table.table-sm.table-striped
								thead
									tr.table-dark
										th(scope='row') Time
										th(scope='row') Type
										th(scope='row') Sequence
								tbody
									- import std.algorithm.iteration : map;
									- import std.array : join;
									- foreach (entry; data.trainingcache.map!(t => t.rawAssembledHistory).join)
										tr
											td= entry.time
											td
												-if(!entry.deleted.isNull && entry.deleted.get())
													i.fas.fa-minus.text-danger
												-else
													i.fas.fa-plus.text-success
											td= entry.sequence

					//h5.mb-3 Activity
					//canvas#activity-chart

			footer.pt-5.my-5.text-muted.border-top
				| Created by GBoard Forensics · © #{curTime.year}

		//- loaded javascript libraries
		script(
			src=format!"https://cdn.jsdelivr.net/npm/bootstrap@%s/dist/js/bootstrap.bundle.min.js"(BOOTSTRAP_JS_VERSION.split(";").front),
			integrity=BOOTSTRAP_JS_VERSION.split(";").back,
			crossorigin="anonymous"
		)
		script(
			src=format!"https://cdn.jsdelivr.net/npm/chart.js@%s/dist/chart.min.js"(CHART_JS_VERSION.split(";").front),
			integrity=CHART_JS_VERSION.split(";").back,
			crossorigin="anonymous"
		)

		- import asdf.serialization;
		script= format!"var data = %s;"(data.serializeToJson!())
